import streamlit as st
import pickle
import numpy as np
import requests
from PIL import Image
from streamlit_lottie import st_lottie
from streamlit_option_menu import option_menu
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import img_to_array
import io
import json
import time




# Cargar los modelos de predicci√≥n neuronal
age_model = keras.models.load_model('models/AgesModel.h5')
emotion_model = keras.models.load_model('models/EmotionsModel.h5')

# Funci√≥n para preprocesar la imagen antes de la predicci√≥n
def preprocess_image(image):
    # Preprocesamiento de la imagen (ajuste seg√∫n sea necesario)
    processed_image = image.resize((150, 150))
    processed_image = img_to_array(processed_image)
    processed_image = processed_image / 255.0
    processed_image = np.expand_dims(processed_image, axis=0)
    return processed_image

# Funci√≥n para realizar la predicci√≥n de edad en una imagen
def predict_age(image):
    processed_image = preprocess_image(image)
    prediction = age_model.predict(processed_image)
    # Ajusta la l√≥gica de predicci√≥n seg√∫n tu modelo de edad
    age_range = int(prediction[0][0])

    if age_range <= 5:
        age_range = "0-5"
    elif age_range <= 10:
        age_range = "5-10"
    elif age_range <= 15:
        age_range = "10-15"
    elif age_range <= 20:
        age_range = "15-20"
    elif age_range <= 25:
        age_range = "20-25"
    elif age_range <= 30:
        age_range = "25-30"
    elif age_range <= 35:
        age_range = "30-35"
    elif age_range <= 40:
        age_range = "35-40"
    elif age_range <= 45:
        age_range = "40-45"
    elif age_range <= 50:
        age_range = "45-50"
    elif age_range <= 55:
        age_range = "50-55"
    elif age_range <= 60:
        age_range = "55-60"
    elif age_range <= 65:
        age_range = "60-65"
    elif age_range <= 70:
        age_range = "65-70"
    elif age_range <= 75:
        age_range = "70-75"
    elif age_range <= 80:
        age_range = "75-80"
    elif age_range <= 85:
        age_range = "80-85"
    elif age_range <= 90:
        age_range = "85-90"
    elif age_range <= 95:
        age_range = "90-95"
    elif age_range <= 100:
        age_range = "95-100"

    return age_range



# Funci√≥n para realizar la predicci√≥n de emociones en una imagen
def predict_emotion(image):
    processed_image = preprocess_image(image)
    prediction = emotion_model.predict(processed_image)
    # Ajusta la l√≥gica de predicci√≥n seg√∫n tu modelo de emociones
    emotion = np.argmax(prediction[0])
    emotions = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']

    prediction_emotion = emotions[emotion]

    return prediction_emotion

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="APP FACE RECOGNITION",
    page_icon=":eyeglasses:",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Centrar el t√≠tulo de la aplicaci√≥n
st.markdown("<h1 style='text-align: center;'>üëì APP FACE RECOGNITION</h1>", unsafe_allow_html=True)

# # Cargar el archivo JSON localmente
# with open('icono.json') as json_file:
#     lottie_json = json.load(json_file)
# st_lottie(lottie_json, height=200)


# Men√∫ de navegaci√≥n
pesta√±as = option_menu(None, ["Proyecto", "Modelo", "Planning", "Graficos"], 
    icons=['house', 'camera fill', 'kanban', 'book'], 
    menu_icon="cast", default_index=0, orientation="horizontal")
pesta√±as

if pesta√±as == "Proyecto":
    # Contenido de la p√°gina "Proyecto"
    st.header("üìù Proyecto")

    with st.container():
        st.write("---")
        left_column, right_column = st.columns(2)
        with left_column:
            st.write(
                """
                ### üö© Objetivos principales:
    
                - Entrenar una red neuronal utilizando una base de datos a partir de im√°genes.
                - Reconocer y clasificar la expresi√≥n facial de las personas en las im√°genes.
                - Determinar el rango de edad de las personas a partir de las im√°genes.
                
                """
            )
        
        with right_column:
            # Leer el contenido del archivo JSON
            with open("imagenes/faceicon.json", "r") as json_file:
                json_data = json.load(json_file)
            # Mostrar la animaci√≥n con el contenido del archivo JSON
            st_lottie(json_data, height=200, key="coding")
        
        descripcion = """
        #### üìã Importancia y Aplicaciones
        
        Este proyecto tiene relevancia en varias √°reas, como:
        
        - **Reconocimiento Facial**: Permite identificar y clasificar emociones en im√°genes, lo cual resulta √∫til en aplicaciones de seguridad, an√°lisis y sistemas de interacci√≥n humano-computadora.
        - **Publicidad Personalizada**: La clasificaci√≥n del rango de edad obtenida a trav√©s del reconocimiento facial puede ayudar a adaptar los anuncios y contenidos en l√≠nea a diferentes grupos demogr√°ficos. Esto permite ofrecer una experiencia de usuario m√°s personalizada y relevante.
        - **Investigaci√≥n de Mercado**: El reconocimiento facial proporciona informaci√≥n valiosa sobre las preferencias y comportamientos de diferentes grupos de edad en relaci√≥n con productos y servicios. Esto ayuda a las empresas a comprender mejor a su audiencia y tomar decisiones de marketing m√°s informadas.
        
        
        #### üî® Proceso de Desarrollo
        
        El proyecto consta de los siguientes pasos:
        
        1. **Recopilaci√≥n y Preparaci√≥n de Datos**: Se utiliza una base de datos de im√°genes etiquetadas con expresiones faciales y edades para entrenar el modelo. La calidad y cantidad de los datos son fundamentales para lograr resultados precisos y confiables.
        2. **Entrenamiento del Modelo**: Se entrena una red neuronal utilizando los datos recopilados y se ajusta su rendimiento. Esto implica alimentar el modelo con las im√°genes etiquetadas y optimizar sus par√°metros para que aprenda a reconocer patrones y caracter√≠sticas relevantes.
        3. **Validaci√≥n y Evaluaci√≥n**: Se eval√∫a el modelo utilizando datos de prueba que no se utilizaron durante el entrenamiento. Esto permite medir su precisi√≥n y desempe√±o, identificar posibles problemas y realizar ajustes necesarios.
        4. **Despliegue y Uso**: Se crea una interfaz de usuario interactiva en Streamlit para utilizar el modelo entrenado y realizar inferencias en nuevas im√°genes. Esto facilita la aplicaci√≥n pr√°ctica del reconocimiento facial y brinda una experiencia accesible y amigable para los usuarios.
        
        
        #### ‚úÖ Ventajas del Reconocimiento Facial:
        
        - Mayor seguridad en el acceso a dispositivos y espacios f√≠sicos.
        - Personalizaci√≥n de contenidos y anuncios en l√≠nea, mejorando la experiencia del usuario.
        - Automatizaci√≥n de procesos en aplicaciones de an√°lisis y sistemas de interacci√≥n.
        - Herramienta √∫til en investigaciones de mercado y an√°lisis demogr√°ficos.
        
        
        #### ‚ùå Desventajas y Consideraciones √âticas:
        
        - Posibles riesgos de privacidad y protecci√≥n de datos personales.
        - Potencial de discriminaci√≥n y sesgos si no se manejan adecuadamente los datos y algoritmos.
        - Necesidad de regulaciones y pol√≠ticas claras para proteger los derechos individuales.
        - Importancia de la transparencia y explicabilidad de los algoritmos utilizados.
        - Conciencia y mitigaci√≥n de posibles impactos sociales y culturales.
        
        Es esencial abordar estas desventajas y consideraciones √©ticas para garantizar un uso responsable y √©tico del reconocimiento facial.
        """
        
        st.markdown(descripcion)


if pesta√±as == "Modelo":
    # Contenido de la p√°gina "Modelo"
    st.header("Modelo")
    st.write("Comenzar con la predicci√≥n üëá")

    # Formulario de carga de imagen
    uploaded_file = st.file_uploader("Sube una imagen", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        # Mostrar la animaci√≥n de carga mientras se procesa la imagen
        progress_bar = st.progress(0)
        status_text = st.empty()

        # Leer la imagen
        image = Image.open(uploaded_file)

        # Simular el tiempo de procesamiento
        for i in range(1, 101):
            time.sleep(0.1)
            progress_bar.progress(i)
            status_text.text(f"Procesando predicci√≥n de la imagen... {i}% completado")

        # Detener la animaci√≥n y mostrar la imagen cargada
        progress_bar.empty()
        status_text.text("Imagen cargada")

        # Dividir la p√°gina en dos columnas
        col1, col2 = st.columns(2)

        # Mostrar la imagen en la columna derecha
        with col2:
            st.image(image, caption='Imagen cargada', use_column_width=False)

        # Realizar la predicci√≥n de edad
        age_range = predict_age(image)

        # Realizar la predicci√≥n de emociones
        emotion = predict_emotion(image)

        # Mostrar los resultados en la columna izquierda
        with col1:
            st.subheader("Resultado de la predicci√≥n:")
            st.write(f"- **Expresi√≥n**: {emotion}")
            st.write(f"- **Edad**: {age_range}")

elif pesta√±as == "Planning":
    # Contenido de la p√°gina "Planning"
    with st.expander("Metodo SCRUM"):
    
    # Dividir la p√°gina en dos columnas
        left_column, right_column = st.columns([3, 1])

    # Columna izquierda: Descripci√≥n
        with left_column:
            descripcion = """
            ### Metodo SCRUM
            
            Dise√±ado para gestionar proyectos complejos, fomentar la colaboraci√≥n y la adaptabilidad, y ofrecer un enfoque iterativo e incremental. 
    
            Puntos clave del m√©todo:
    
            - **Sprint:** Es el coraz√≥n del m√©todo Scrum. Es un per√≠odo de tiempo fijo, generalmente de 1 a 4 semanas, durante el cual se lleva a cabo el trabajo. 
            - **Reuni√≥n de Planificaci√≥n:** Al inicio, el equipo de desarrollo se re√∫ne para seleccionar las tareas del y establecer los objetivos y la planificaci√≥n.
            - **Reuniones Diarias:** Son breves reuniones diarias en las que el equipo de desarrollo comparte el progreso, identifica los obst√°culos y coordina el trabajo restante.
            - **Revisi√≥n:** Al finalizar, cada miembro del equipo de desarrollo muestra el trabajo realizado, quienes brindan retroalimentaci√≥n y hacen los ajustes necesarios.
            - **An√°lisis final:** Despu√©s de la Revisi√≥n, el equipo de desarrollo se re√∫ne para analizar c√≥mo funcion√≥ y c√≥mo pueden mejorar en el pr√≥ximo. Se identifican acciones para implementar mejoras en el proceso.
            """
            st.markdown(descripcion)
            
        # Columna derecha: Imagen
        with right_column:
            # Cargar y mostrar la imagen
            image = Image.open("imagenes/scrum.png")
            st.image(image, use_column_width=True)

    # Desplegables
    with st.expander("Planning Semanal del Proyecto"):
        descripcion ="""
        #### üóìÔ∏è Semana 1
    
        ##### Selecci√≥n del proyecto: Reconocimiento facial
    
            Para llevar a cabo este proyecto, utilizaremos redes neuronales de tipo convolucional. 
            El proyecto consta de una base de datos llena de im√°genes de diferentes personas con diferentes caracter√≠sticas. 
            El objetivo es lograr reconocer el rango de edad de la persona y sus expresiones.
    
        ##### Recolecci√≥n y preparaci√≥n de datos
    
        Tecnolog√≠as y librer√≠as: Python, pandas o Polars, OpenCV, Cv2, etc.
        
            Pasos:
            - Recopilaci√≥n de im√°genes y asegurarnos de que est√©n en un formato compatible, como JPG o PNG.
            - Utilizar pandas para leer el archivo CSV y preprocesar los datos.
            - Utilizar OpenCV para leer y preprocesar las im√°genes. Puedes necesitar realizar operaciones como el redimensionamiento, la normalizaci√≥n, la detecci√≥n de caras, etc.
            - Almacenar las im√°genes y sus caracter√≠sticas en una base de datos SQL. PostgreSQL es una opci√≥n popular para esto. Aseg√∫rate de que las im√°genes est√©n correctamente asociadas con sus caracter√≠sticas correspondientes.
    
        #### üóìÔ∏è Semana 2
    
       ##### Modelado
        
       Tecnolog√≠as y librer√≠as: TensorFlow, Keras, scikit-learn
        
            Pasos:
            - Utilizar TensorFlow y Keras para construir una red neuronal. Comenzar con una red neuronal convolucional (CNN), que es com√∫nmente usada para el reconocimiento visual.
            - Dividir los datos en conjuntos de entrenamiento y validaci√≥n. Utilizar el conjunto de entrenamiento para entrenar tu red neuronal y el conjunto de prueba para evaluar su rendimiento.
            - Ajustar los par√°metros de tu modelo para mejorar su rendimiento. Esto puede incluir la tasa de aprendizaje, el n√∫mero de capas en la red, etc.
    
        ##### Evaluaci√≥n del modelo
        
        Tecnolog√≠as y librer√≠as: scikit-learn, matplotlib, seaborn
        
            Pasos:
            - Utilizar scikit-learn para calcular m√©tricas de evaluaci√≥n, como la precisi√≥n y la matriz de confusi√≥n.
            - Utilizar matplotlib y seaborn para visualizar los resultados de tu modelo. Esto puede incluir una curva ROC, una matriz de confusi√≥n, etc.
    
        #### üóìÔ∏è Semana 3
    
        ##### Elaboraci√≥n de la app con Streamlit:
            
       Tecnolog√≠as y librer√≠as: TensorFlow y Streamlit.
    
            Una vez entrenados y guardados los modelos con los que vamos a trabajar, comenzamos con la elaboraci√≥n de la app, 
            cuyo objetivo principal es que el usuario introduzca una imagen facial para predecir la edad y la expresi√≥n facial.
    
        #### üóìÔ∏è Semana 4
    
        Prueba del modelo con im√°genes al azar y mejoras de la app.
        
        """   
        st.markdown(descripcion)
        
    with st.expander("Notion"):
        # Dividir la p√°gina en dos columnas
        left_column, right_column = st.columns([3, 1])
    
        # Columna izquierda: Descripci√≥n
        with left_column:
            descripcion = """
            ### Notion
    
            **Notion** es una efectiva herramienta en la gesti√≥n de proyectos y el seguimiento de tiempos. 
            Mantener la informaci√≥n actualizada y utilizar las diferentes vistas y herramientas disponibles 
            permite tener una visi√≥n clara del progreso del proyecto y cumplir con los plazos establecidos.
    
            #### Principales caracter√≠sticas de Notion:
    
            - Integraci√≥n de bibliotecas y herramientas de Python.
            - Automatizaci√≥n de tareas.
            - Incrustaci√≥n de c√≥digo Python en las p√°ginas utilizando bloques de c√≥digo, adem√°s de poder ejecutarlo.
            - Visualizaci√≥n de datos como tablas y gr√°ficos utilizando las bibliotecas Matplotlib, Seaborn o Plotly para generar visualizaciones interactivas.
            - Colaboraci√≥n con otros miembros del equipo en tiempo real.
    
            """
    
            st.markdown(descripcion)
    
        # Columna derecha: Imagen
        with right_column:
            # Cargar y mostrar la imagen
            image = Image.open("imagenes/notion.png")
            st.image(image, use_column_width=True)
            
import json

if pesta√±as == "Graficos":
    # Contenido de la p√°gina "Graficos"
    st.header("Graficos")
    st.write("#### Visualizaci√≥n del progreso del entrenamiento y validaci√≥n")

    # Cargar las im√°genes
    image1 = Image.open("imagenes/Imagen 1.png")
    image2 = Image.open("imagenes/Imagen 2.png")
    image3 = Image.open("imagenes/grafico3.png")
    image4 = Image.open("imagenes/grafico4.png")

    # Crear los botones
    boton1 = st.button("Reconocimiento edad")
    boton2 = st.button("Reconocimiento emociones")
    boton3 = st.button("Red Neuronal")

    # Mostrar el contenido seg√∫n el bot√≥n seleccionado
    if boton1:
        # Mostrar las dos im√°genes de la opci√≥n 1
        st.image(image1, use_column_width=False)
        st.image(image2, use_column_width=False)
    elif boton2:
        # Mostrar las dos im√°genes de la opci√≥n 2
        st.image(image3, use_column_width=False)
        st.image(image4, use_column_width=False)
    elif boton3:
        # Ruta del archivo de video guardado localmente
        video_path = "imagenes/redneuronal.mp4"

        # Leer el contenido del archivo de video en bytes
        with open(video_path, "rb") as video_file:
            video_bytes = video_file.read()

        # Establecer el estilo CSS para el reproductor de video
        video_style = """
        <style>
        video {
            max-width: 800px;
            width: 100%;
            height: auto;
        }
        </style>
        """

        # Mostrar el estilo CSS
        st.markdown(video_style, unsafe_allow_html=True)

        # Dividir la p√°gina en columnas
        left_column, right_column = st.columns([2, 1])

        # Mostrar el video en Streamlit en la columna izquierda
        with left_column:
            st.video(video_bytes, format='video/mp4')


        # Mostrar el contenido del archivo JSON en la columna derecha
        with right_column:
            # Leer el contenido del archivo JSON
            with open("imagenes/neuronas.json", "r") as json_file:
                json_data = json.load(json_file)
            # Mostrar la animaci√≥n con el contenido del archivo JSON
            st_lottie(json_data, height=300, key="coding")


    
if __name__ == '__preprocess_image__':
    preprocess_image()
